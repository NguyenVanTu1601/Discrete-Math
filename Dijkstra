#include<iostream>
#include<bits/stdc++.h>
using namespace std;
#define Max 100
int a[Max][Max];
int n, s, t;
int Maximum = 32000;
int d[Max]; // Tong duong di tai dinh s
vector<int >T; // Luu cac dinh chua xet toi
int truoc[Max]; // Luu vet duong di
int check[Max];

void Init(){
	cin >> n >> s >> t;
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= n; j++){
			cin >> a[i][j];
			if(a[i][j] == 0) a[i][j] = Maximum;
		}
		check[i] = 0;
	}
	
}

void Dijkstra(int s){
	d[s] = 0;
	int u;
	int vitri;
	for(int i = 1; i <= n; i++){
		if(i != s) {
			T.push_back(i);
			d[i] = a[s][i];
			truoc[i] = s;
		}
	}
	
	while(T.size() != 0 ){
		int mini = 2000;
		for(int i = 0; i < T.size(); i++){
			if(d[T[i]] < mini) {
				mini = d[T[i]];
				u = T[i]; 
				vitri = i;// Dung de loai dinh i ra khoi t
			}
		}
		T.erase(T.begin() + vitri);
		for(int i = 0; i < T.size(); i++){
			// Neu di vong qua dinh i ma ngan hon thi cap nhap lai duong di
			if(d[T[i]] > d[u] + a[u][T[i]]){
				d[T[i]] = d[u] + a[u][T[i]];
				truoc[T[i]] = u;
			}
		}	
	}
}

void Result(){
	cout << "Do dai duong di : " << d[t] << endl;
	cout << "Duong di : ";
	cout << t << " ";
	int i = truoc[t];
	while(i != s){
		cout << i  << " ";
		i = truoc[i];
	}
	cout << s;
}
main(){
	Init();
	Dijkstra(s);
	Result();
    return 0;
}
/*
13 1 13
0 2 8 0 0 0 0 0 0 0 0 0 0
0 0 2 0 0 0 9 0 0 0 0 0 0
0 0 0 6 0 8 1 0 0 0 0 0 0
7 0 0 0 0 0 0 0 0 0 0 0 0
0 0 1 7 0 0 0 0 0 0 0 0 0
0 0 0 0 1 0 0 9 8 0 0 0 0
0 0 0 0 0 2 0 2 0 0 0 0 0
0 0 0 0 0 0 0 0 9 0 0 2 0
0 0 0 0 0 0 0 0 0 6 0 9 8
0 0 0 0 7 6 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 6 7 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 2
0 0 0 0 0 0 0 0 0 0 7 0 0
1-> 8 : 8 7 3 2 1 dai 7
1->13 : 13 12 8 7 3 2 1 dai 11

*/
