
// Dem so tplt , tim dinh tru, canh cau

#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int a[1000][1000];
int n;
int check[1000];

// Khoi tao stack
struct Stack{
	int top;
	int *nodes;
};

void Push_Stack(Stack *stack, int node){
	int *tmpNodes = new int [stack->top + 2];
	stack->top ++;
	for(int i = 0; i < stack->top; i++)
	{
		tmpNodes[i] = stack->nodes[i];
	}
	tmpNodes[stack->top] = node;
	delete [] stack->nodes;
	stack->nodes = tmpNodes;
	return;
}

int Pop_Stack(Stack *stack)
{
	int result = stack->nodes[stack->top];
	stack->top --;
	int *tmpNodes = new int[stack->top + 1];
	for(int i = 0; i <= stack->top; i++)
	{
		tmpNodes[i] = stack->nodes[i];
	}
	delete[] stack->nodes;
	stack->nodes = tmpNodes;
	return result;
}
int Empty_Stack(Stack *stack){
	if(stack->top < 0) return 1;
	else return 0;
}

// Khoi tao n, a[][]
void Init(){
	cout <<"Nhap so dinh n = ";
	cin >> n;
	cout <<"Nhap ma tran ke :" << endl;
	for(int i = 1; i <= n; i++){
		check[i] = 1;
		for(int j = 1; j <= n; j++){
			cin >> a[i][j];
		}
	}
}

// Duyet DFS
void DFS(Stack *stack, int u){
	//cout << u << " ";
	check[u] = 0;
	Push_Stack(stack,u);
	while(Empty_Stack(stack) == 0){
		int s = Pop_Stack(stack);
		for(int v = 1; v <= n; v++){
			if(check[v] == 1 && a[s][v] == 1){
				//cout << v << " ";
				Push_Stack(stack,s);
				Push_Stack(stack,v);
				check[v] = 0;
				break;
			}
		}
	}
}
// Tim so tplt
int slt(Stack *stack){
	for(int i = 1; i <= n ; i++){
		check[i] = 1;
	}
	int dem = 0;
	for(int i = 1; i <= n; i++){
		if(check[i] == 1){
			dem++;
			DFS(stack,i);
		}
	}
	return dem;
}

// Tim dinh tru 
int Dinh_tru(Stack *stack, int u){
	for(int i = 1; i <= n; i++){
		check[i] = 1;
	}
	check[u] = 0; // Bo qa dinh u
	// Neu u = 1 xet DFS cua dinh khac 1
	if(u == 1){
		DFS(stack,2);
		for(int i = 1; i <= n; i++){
			if(check[i] == 1) return 1;
		}
		return 0;
	}
	else{
		DFS(stack,1);
		for(int i = 1; i <= n; i++){
			if(check[i] == 1) return 1;
		}
		return 0;
	}
	
}

// Tim canh cau 
void Canh_cau(Stack *stack, int i){
	for(int j = i + 1; j <= n; j++){
		if(a[i][j] == 1){
			a[i][j] = 0;
			a[j][i] = 0;
			for(int k = 1; k <= 13; k++){
				check[k] = 1;
			}
			int kt = 0;
			DFS(stack,1);
			for(int k = 1; k <= n; k++){
				if(check[k] == 1){
					kt = 1;
					break;
				}
			}
			if(kt == 1){
				cout << "(" << i <<","<< j << ") ";
			}
			a[i][j] = 1;
			a[j][i] = 1;	
		}
	}
}

main(){
	Stack *stack = new Stack;
	stack->nodes = new int;
	stack->top = -1;
	Init();
	cout <<"So tplt = " << slt(stack);
	// Tim dinh tru
	cout <<"\nDanh sach dinh tru : ";
	for(int i = 1; i <= n; i++){
		if(Dinh_tru(stack, i) == 1) cout << i << " ";
	}
	cout <<"\nDanh sach canh cau : " ;
	for(int i = 1; i <= n; i++){
		Canh_cau(stack,i);
	}
	
    return 0;
}
/*
13
0 1 1 1 0 0 0 0 0 0 0 0 0
1 0 1 1 0 1 0 0 0 0 0 0 0
1 1 0 1 1 0 0 0 0 0 0 0 0
1 1 1 0 0 0 1 0 0 0 0 0 0
0 0 1 0 0 1 1 1 0 0 0 1 0
0 1 0 0 1 0 1 0 0 0 0 1 0
0 0 0 1 1 1 0 1 0 0 0 0 0
0 0 0 0 1 0 1 0 0 0 0 1 0
0 0 0 0 0 0 0 0 0 1 1 0 1
0 0 0 0 0 0 0 0 1 0 1 1 1
0 0 0 0 0 0 0 0 1 1 0 0 1
0 0 0 0 1 1 0 1 0 1 0 0 0
0 0 0 0 0 0 0 0 1 1 1 0 0
*/
